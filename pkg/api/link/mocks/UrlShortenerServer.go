// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	linkv1 "github.com/k1v4/url_shortener/pkg/api/link"
	mock "github.com/stretchr/testify/mock"
)

// UrlShortenerServer is an autogenerated mock type for the UrlShortenerServer type
type UrlShortenerServer struct {
	mock.Mock
}

// GetOrigin provides a mock function with given fields: _a0, _a1
func (_m *UrlShortenerServer) GetOrigin(_a0 context.Context, _a1 *linkv1.GetOriginRequest) (*linkv1.GetOriginResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrigin")
	}

	var r0 *linkv1.GetOriginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *linkv1.GetOriginRequest) (*linkv1.GetOriginResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *linkv1.GetOriginRequest) *linkv1.GetOriginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*linkv1.GetOriginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *linkv1.GetOriginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUrl provides a mock function with given fields: _a0, _a1
func (_m *UrlShortenerServer) SaveUrl(_a0 context.Context, _a1 *linkv1.SaveUrlRequest) (*linkv1.SaveUrlResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveUrl")
	}

	var r0 *linkv1.SaveUrlResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *linkv1.SaveUrlRequest) (*linkv1.SaveUrlResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *linkv1.SaveUrlRequest) *linkv1.SaveUrlResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*linkv1.SaveUrlResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *linkv1.SaveUrlRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedUrlShortenerServer provides a mock function with given fields:
func (_m *UrlShortenerServer) mustEmbedUnimplementedUrlShortenerServer() {
	_m.Called()
}

// NewUrlShortenerServer creates a new instance of UrlShortenerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUrlShortenerServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UrlShortenerServer {
	mock := &UrlShortenerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
